{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":14623,"sourceType":"datasetVersion","datasetId":10422}],"dockerImageVersionId":30646,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Time Series Weather Forecast\n\n* **`Date Time`**: The date and time of the observation.\n* **`p (mbar)`**: Atmospheric pressure.\n* **`T (degC)`**: Temperature in degrees Celsius.\n* **`Tpot (K)`**: Temperature in Kelvin.\n* **`Tdew (degC)`**: Dew point temperature in degrees Celsius.\n* **`rh (%)`**: Relative humidity.\n* **`VPmax (mbar)`**: Saturation vapor pressure.\n* **`VPact (mbar)`**: Vapor pressure.\n* **`VPdef (mbar)`**: Vapor pressure deficit.\n* **`sh (g/kg)`**: Specific humidity.\n* **`H2OC (mmol/mol)`**: Water vapor concentration.\n* **`rho (g/m^3)`**: Air density.\n* **`wv (m/s)`**: Wind velocity.\n* **`max. wv (m/s)`**: Maximum wind velocity.\n* **`wd (deg)`**: Wind direction in degrees.","metadata":{}},{"cell_type":"code","source":"# improt libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport datetime\nimport os\nimport tensorflow as tf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport plotly.express as px","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Setting plot figure size\nmpl.rcParams['figure.figsize'] = (15, 4)\nmpl.rcParams['axes.grid'] = True","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# zip_path = tf.keras.utils.get_file(\n#   origin = \"https://storage.googleapis.com/tensorflow/tf-keras-datasets/jena_climate_2009_2016.csv.zip\",\n#   fname = \"jena_climate_2009_2016.csv.zip\",\n#   extract = True\n# )\n\n# csv_path, _ = os.path.splitext(zip_path)\n\n# # Load the data\n# df = pd.read_csv(csv_path)\n# df.to_csv('data/jena_climate_2009_2016.csv')","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv('data/jena_climate_2009_2016.csv')","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Select every 12th row starting from the 11th index (0-based index) from the dataframe 'df'. \n# This is typically used when the data is monthly and you want to pick out the same month each year. \ndf = df[11::12]","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.shape","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Statistical summary of the dataframe","metadata":{}},{"cell_type":"code","source":"df.describe().T","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Extract the date time column","metadata":{}},{"cell_type":"code","source":"date_time = pd.to_datetime(df.pop('Date Time'), format='%d.%m.%Y %H:%M:%S')\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.shape","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Plot Subplots for Tempreture, Pressure and Density","metadata":{}},{"cell_type":"code","source":"\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=3, cols=1, subplot_titles=('Temperature', 'Pressure', 'Density'))\n\nfig.add_trace(go.Scatter(x=date_time, y=df['T (degC)'], mode='lines', name='Temperature'), row=1, col=1)\n\nfig.add_trace(go.Scatter(x=date_time, y=df['p (mbar)'], mode='lines', name='Pressure'), row=2, col=1)\n\nfig.add_trace(go.Scatter(x=date_time, y=df['rho (g/m**3)'], mode='lines', name='Density'), row=3, col=1)\n\nfig.update_layout(height=800, width=1200, title_text=\"Temperature, Pressure, and Density\")\n\nfig.show()\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Temperature in degrees Celsius","metadata":{}},{"cell_type":"code","source":"import plotly.express as px\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef plot_decomposition(df, column, period=365, color='#0000ff', line_width=0.5):\n    # decompose the data to see the trend, seasonality and noise\n    decomposition = seasonal_decompose(df[column], model='additive', period=period)\n\n    # plot the decomposition error, trend and residue using plotly \n    fig = px.line(decomposition.resid, title='Decomposition Error', color_discrete_sequence=['#0000ff'])\n    fig.update_traces(line=dict(width=line_width))\n    #increase the title size\n    fig.update_layout(title_font_size=30)\n    fig.show()\n\n    fig1 = px.line(decomposition.trend, title='Decomposition Trend', color_discrete_sequence=['#0000ff'])\n    fig1.update_traces(line=dict(width=line_width + 1))\n    #increase the title size\n    fig1.update_layout(title_font_size=30)\n    fig1.show()\n\n    fig2 = px.line(decomposition.seasonal, title='Decomposition Seasonality', color_discrete_sequence=['#0000ff'])\n    fig2.update_traces(line=dict(width=line_width))\n    #increase the title size\n    fig2.update_layout(title_font_size=30)\n    fig2.show()\n\n    # diplay observed \n    fig3 = px.line(decomposition.observed, title='Decomposition Observed', color_discrete_sequence=['#0000ff'])\n    fig3.update_traces(line=dict(width=line_width))\n    fig3.update_layout(title_font_size=30)\n    fig3.show()\n\n\nplot_decomposition(df, 'T (degC)')\n\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Plot Humidity","metadata":{}},{"cell_type":"code","source":"# plot decompose for pressure\nplot_decomposition(df, 'rh (%)')","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Replace Negative Values in Wind Velocity","metadata":{}},{"cell_type":"code","source":"# remove the negative values in wind velocity\ndef replace_bad_values(df, column, bad_value, replacement):\n    data = df[column] == bad_value\n    df.loc[data, column] = replacement\n    return df","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Split Data into Train, Validation and Test Data","metadata":{}},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\n\n\nclass SplitData(BaseEstimator, TransformerMixin):\n    def __init__(self, train_split, val_split):\n        self.train_split = train_split\n        self.val_split = val_split\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        data_len = len(X)\n        train_data = X[0:int(data_len * self.train_split)]\n        val_data = X[int(data_len * self.train_split):int(data_len * self.val_split) + int(data_len * self.train_split)]\n        test_data = X[int(data_len * self.val_split) + int(data_len * self.train_split):]\n        return train_data, val_data, test_data  \n","metadata":{"execution":{"iopub.status.busy":"2024-02-08T07:30:43.745079Z","iopub.execute_input":"2024-02-08T07:30:43.745469Z","iopub.status.idle":"2024-02-08T07:30:45.087232Z","shell.execute_reply.started":"2024-02-08T07:30:43.745437Z","shell.execute_reply":"2024-02-08T07:30:45.086224Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Normalize Data","metadata":{}},{"cell_type":"code","source":"class NormalizeData(BaseEstimator, TransformerMixin):\n    def __init__(self, train_data):\n        self.train_data = train_data\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        mean = self.train_data.mean()\n        std = self.train_data.std()\n        return (X - mean) / std\n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Replace bad values in wind velocity\ndf = replace_bad_values(df, 'wv (m/s)', -9999.0, 0.0)\ndf = replace_bad_values(df, 'max. wv (m/s)', -9999.0, 0.0)\n\n# split thw data into train, validation and test\nsplit_data = SplitData(0.7, 0.2)\ntrain_data, val_data, test_data = split_data.fit_transform(df)\n\n# Normalize the data\nnormalize_data = NormalizeData(train_data)\ntrain_data = normalize_data.fit_transform(train_data)\nval_data = normalize_data.fit_transform(val_data)\ntest_data = normalize_data.fit_transform(test_data)","metadata":{},"outputs":[],"execution_count":null}]}